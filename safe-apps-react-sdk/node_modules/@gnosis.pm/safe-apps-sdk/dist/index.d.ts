export declare type Networks = 'rinkeby' | 'mainnet';
export interface SdkInstance {
    addListeners: (listeners: SafeListeners) => void;
    removeListeners: () => void;
    sendTransactions: (txs: any[]) => void;
}
export interface SafeInfo {
    safeAddress: string;
    network: Networks;
    ethBalance: string;
}
export interface SafeListeners {
    onSafeInfo: (info: SafeInfo) => any;
}
export declare enum FromSafeMessages {
    ON_SAFE_INFO = "ON_SAFE_INFO"
}
export declare enum ToSafeMessages {
    SEND_TRANSACTIONS = "SEND_TRANSACTIONS"
}
/**
 * Register all the listeners supported. When Safe-app sends a message
 * depending on the messageId, the corresponding listener will be called
 * @param listeners
 */
declare function addListeners({ ...allListeners }: SafeListeners): void;
/**
 * Unregister all the listeners previously set by addListeners.
 */
declare function removeListeners(): void;
/**
 * Request Safe app to send transactions
 * @param txs
 */
declare function sendTransactions(txs: any[]): void;
/**
 * Sets Safe-app url that will render the third-party app.
 * @param parentUrl
 */
declare function initSdk(safeAppUrlsRegExp?: RegExp[]): {
    addListeners: typeof addListeners;
    removeListeners: typeof removeListeners;
    sendTransactions: typeof sendTransactions;
};
export default initSdk;
